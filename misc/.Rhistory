covMat
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
curve(5 * 0.4 ^ x, log='xy')
curve(5 * 0.4 ^ x, log='y')
curve(5 * 0.4 ^ x, log='y', from=-1, to=1, col=2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ejes(lty=2)
ejes <- function(...)
abline(v=0, h=0, ...)
ejes(lty=2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/Dropbox/jmb-maestria/tesis/result-campo-medio/files/curvas-f.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox/jmb-maestria/tesis/result-campo-medio/files/curvas-f.R')
source('~/.active-rstudio-document')
curve(step(x))
curve(step(x), from=-1)
epatch <- c(1.0,  1.2,  1.6,  1.8,  2.0,  2.2,  3.4,  5.4,  8.2, 10.0, 10.0)
plot(epatch, type='s')
movDist <- c(0.04723842, 0.09607972, 0.09960046, 0.14176153, 0.17503441,
0.20445674, 0.21389354, 0.23180903, 0.27215663, 0.34028626,
0.38912756)
plot(epatch ~ movDist, type='s')
mnl <- nls(epatch ~ step(movDist, a), start(a=0.5))
traceback()
?hasTsp
?step
source('~/.active-rstudio-document')
escalon <- function(x, a=0) {
y <- x
y[x <= a] <- 0
y[x >  a] <- 1
return(y)
}
epatch <- c(1.0,  1.2,  1.6,  1.8,  2.0,  2.2,  3.4,  5.4,  8.2, 10.0, 10.0)
movDist <- c(0.04723842, 0.09607972, 0.09960046, 0.14176153, 0.17503441,
0.20445674, 0.21389354, 0.23180903, 0.27215663, 0.34028626,
0.38912756)
mnl <- nls(epatch ~ escalon(movDist, a), start(a=0.5))
traceback()
?nls
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=0.5))
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=0.1))
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=0.2))
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=0.23))
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=0))
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=10))
?Distributions
mnl <- nls(epatch ~ escalon(movDist, a), start=list(a=1))
escalon(movDist, .2)
epatch
mnl <- nls(epatch ~ escalon(movDist, a) + 1, start=list(a=1))
mnl <- nls(epatch ~ escalon(movDist, a) * 9 + 1, start=list(a=1))
mnl <- nls(epatch ~ escalon(movDist, a) * 9 + 1, start=list(a=0.2))
lines(escalon(movDist, a) * 9 + 1 ~ movDist, col=3)
lines(escalon(movDist, .23) * 9 + 1 ~ movDist, col=3)
mnl <- nls(epatch ~ movDist*a + 1, start=list(a=0.2))
mnl
mnl <- nls(epatch ~ movDist*a + 1, start=list(a=0.2))
lines(predict(mnl))
abline(1, 19.24, col=3)
source('~/.active-rstudio-document')
mnl
mnl <- nls(epatch ~ escalon(movDist, a, 1, 10), start=list(a=0.2))
diferencia <- function(a, x, ...) {
out <- sqrt((escalon(x, a, ...)) ** 2)
return(out)
}
diferencia(0.2, movDist, min=1, max=10)
diferencia <- function(a, x, ...) {
out <- sqrt((escalon(x, a, ...) - x) ** 2)
return(out)
}
diferencia(0.2, movDist, min=1, max=10)
lines(diferencia(0.2, movDist, min=1, max=10), col=4)
lines(diferencia(0.2, movDist, min=1, max=10) ~ movDist, col=4)
?optimize
diferencia <- function(a, x=movDist, ...) {
out <- sqrt((escalon(x, a, ...) - x) ** 2)
return(out)
}
diferencia <- function(a, x=movDist, y=epatch, ...) {
out <- sqrt((escalon(x, a, ...) - y) ** 2)
return(out)
}
diferencia(0.2, min=1, max=10)
lines(diferencia(0.2, movDist, min=1, max=10) ~ movDist, col=5)
optimize(diferencia, interval=range(movDist))
diferencia <- function(a, x=movDist, y=epatch, ...) {
out <- sum(sqrt((escalon(x, a, ...) - y) ** 2))
return(out)
}
optimize(diferencia, interval=range(movDist))
diferencia(0.2, min=1, max=10)
escalon(movDist, 0.2, min=1, max=0)
escalon(movDist, 0.2, min=1, max=10)
optimize(diferencia, interval=range(movDist), min=1, max=10)
diferencia(0.2546414, min=1, max=10)
optimize(diferencia, interval=range(movDist), min=min(epatch), max=max(epatch))
?stepfun
source('~/Dropbox/jmb-maestria/tesis/result-campo-medio/hill-function.R')
source('~/.active-rstudio-document')
hill(0.001, 500, .5)
(hill(0.001, 500, .5))
(x <- hill(0.001, 500, .5))
x
(x <- hill(seq(0, 1, len=20), 500, .5))
x
plot(x)
plot(x + 0.5 + - 0.5 * seq(0, 1, len=20))
plot(x)
plot(x + 0.5 + - 0.5 * x
)
plot(x + 0.5 + - 0.5 * x)
plot(x)
plot(x, type='l')
lines(x + 0.5 + - 0.5 * x, col=3)
source('~/.active-rstudio-document')
manipulate(curve(hill(x, a=a, k=1), n=1e4+1, to=2), a=slider(0, 600))
500/4
manipulate(curve(hill(x, a=a, k=1), n=1e4+1, to=2), a=slider(0, 1500))
source('~/.active-rstudio-document')
curve(hill(x, a=5, k=1), n=1e4+1, to=2)
curve(hill(x, a=15, k=1), n=1e4+1, to=2)
curve(hill(x, a=5, k=1), n=1e4+1, to=2)
curve(hill(x, a=15, k=1), n=1e4+1, add=TRUE)
curve(hill(x, a=30, k=1), n=1e4+1, add=TRUE)
curve(stepFun(x, a=1), n=1e4+1, add=TRUE)
curve(hill(x, a=5,  k=1), n=1e4+1, to=2)
curve(hill(x, a=15, k=1), n=1e4+1, add=TRUE)
curve(hill(x, a=30, k=1), n=1e4+1, add=TRUE)
curve(hill(x, a=60, k=1), n=1e4+1, add=TRUE)
curve(stepFun(x, a=1), n=1e4+1, add=TRUE)
curve(hill(x, a=5,  k=1), n=1e4+1, to=2, ylab='y', col=1)
curve(hill(x, a=15, k=1), n=1e4+1, add=TRUE, col='#616161')
curve(hill(x, a=30, k=1), n=1e4+1, add=TRUE, col='#949494')
curve(hill(x, a=60, k=1), n=1e4+1, add=TRUE, col='#C4C4C4')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?par
source('~/.active-rstudio-document')
abline(v=1, col=3, lty=7)
abline(v=1, col=3, lwd=7)
source('~/.active-rstudio-document')
legend('topleft',
legend=c('Hill, n=60', 'Hill, n=30', 'Hill, n=15', 'Hill, n=5'),
lty=c(rep(1, 4), 3),
col=c(1, '#616161', '#949494', '#C4C4C4',1))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox/jmb-maestria/tesis/metodos-campo-medio/files/curvas-ajuste.R')
source('~/.active-rstudio-document')
curve(hill(x, a=0.5,  k=1), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5,
ylim=0:1, xaxt='n', cex.lab=1.4)
curve(hill(x, a=1,  k=1), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5, ylim=0:1, xaxt='n', cex.lab=1.4)
curve(hill(x, a=3,  k=1), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5, ylim=0:1, xaxt='n', cex.lab=1.4)
curve(hill(x, a=3,  k=1), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5, ylim=0:1, cex.lab=1.4)
curve(hill(x, a=0.5,  k=1), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5, ylim=0:1, cex.lab=1.4)
curve(hill(x, a=0.5,  k=3), n=1e4+1, from=0, to=4, ylab='y', col=1, lwd=5, ylim=0:1, cex.lab=1.4)
abline(v=3)
abline(v=3, h=0.5)
??squared
summary.lm
source('~/.active-rstudio-document')
?slider
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
swiss
Loyn <- read.delim("~/Desktop/Loyn/Loyn.txt")
View(Loyn)
View(swiss)
?swiss
examples(swiss)
example(swiss)
str(swiss)
?datasets-package
?datasets
dim(attitude)
dim(discoveries)
str(discoveries)
plot(discoveries)
DNase
?DNase
coplot(density ~ conc | Run, data=DNase, show.given=FALSE, type='b')
airquality
example(airquality)
hist(airquality$temp)
str(airquality)
hist(airquality$Temp)
summary(airquality$Temp)
sd(airquality$Temp)
summary(airquality$Wind)
sample(6, 1)
sample(6, 1)
sample(6, 1)
sample(6, 1)
sample(6, 1)
sample(6, 100, replace=T)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(registro)
source('~/.active-rstudio-document')
source('~/projects/Curso-R/misc/bus-pasajeros.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("~/projects/Curso-R/misc")
source('~/projects/Curso-R/misc/bus-pasajeros.R')
plot(registro, xlab='Parada', ylab='No. de pasajeros', type='s')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Curso-R/misc/histograma.R')
###Grafico de Victimas
tiempoa?os <- 1
victimas <- 365
victima <- 5000
depredador <- 1
alpha <- victimas / (victima * tiempoa?os * depredador)
r <- 2.2
curve(r / alpha + 0 * x, from = 0, to = 2700, ylim = c(0,60),
xlab = "N? de Victimas", ylab = "N? de Depredadores", col = "red")
alpha <- victimas / (victima * tiempoa?os * depredador)
###Grafico de Victimas
tiempoanos <- 1
victimas <- 365
victima <- 5000
depredador <- 1
alpha <- victimas / (victima * tiempoanos * depredador)
r <- 2.2
curve(r / alpha + 0 * x, from = 0, to = 2700, ylim = c(0,60),
xlab = "N de Victimas", ylab = "N de Depredadores", col = "red")
###depredador con beta alto convierten mas efectivo las presas en el aumento per capita
tiempoanos <- 1
depredadores <- 0.8
depredador <- 500
victima <- 1
betas <- depredadores / (depredador * tiempoa?os * victima)
####con q grande necesita muchas victimas para aumentar per capita
q <- 2.3
abline(v = q / betas, col = "green")
###depredador con beta alto convierten mas efectivo las presas en el aumento per capita
tiempoanos <- 1
depredadores <- 0.8
depredador <- 500
victima <- 1
betas <- depredadores / (depredador * tiempoamos * victima)
####con q grande necesita muchas victimas para aumentar per capita
q <- 2.3
abline(v = q / betas, col = "green")
per capita
tiempoanos <- 1
depredadores <- 0.8
depredador <- 500
victima <- 1
betas <- depredadores / (depredador * tiempoanos * victima)
####con q grande necesita muchas victimas para aumentar per capita
q <- 2.3
abline(v = q / betas, col = "green")
abline(h = 0, v = 0, lty = 3)
###N vs. t_Modelo Logistico
crec_logis <- expression(K / (1 + ((K - N0) / N0) * exp(-r * t)))
r <- 0.1
K <- 80
t <- 0:100
N0 <- 5
plot(t, eval(crec_logis), type = "l", col = "green", xlab = "t", ylab = "N")
abline(h = K, lty = 3)
A <- matrix (0, tfinal + 1, 3)
tfinal <- 12
A <- matrix (0, tfinal + 1, 3)
A
r <- c (1, 0, -0.75)
K <- 1200
N0 <- 50
N <- rep (0, tfinal + 1)
t <- 0:tfinal
A <- matrix (0, tfinal + 1, 3)
for(j in 1:3) {
N <- (K / (1 + ((K - N0) / N0) * exp(-r[j] * t)))
A[,j] <- N
}
A
A <- matrix (0, tfinal + 1, 3)
for(j in 1:3) {
N <- (K / (1 + ((K - N0) / N0) * exp(-r[j] * t)))
A[,j] <- N
round(A, 3)
}
A <- matrix (0, tfinal + 1, 3)
for(j in 1:3) {
N <- (K / (1 + ((K - N0) / N0) * exp(-r[j] * t)))
A[,j] <- N
return(round(A, 3))
}
A <- matrix (0, tfinal + 1, 3)
for(j in 1:3) {
N <- (K / (1 + ((K - N0) / N0) * exp(-r[j] * t)))
A[,j] <- N
print(round(A, 3))
}
matplot(A, type = "o", pch = 1, xlab = "t", ylab = "N")
tfinal <- 10
K <- c (3000, 1500, 500)
r <- 1.2
N0 <- 50
N <- rep (0, tfinal + 1)
t <- 0:tfinal
A <- matrix (0, tfinal + 1, 3)
for(j in 1:3) {
N <- (K[j] / (1 + ((K[j] - N0) / N0) * exp(-r * t)))
A[,j] <- N
}
matplot(A, type = "o", pch = 1, xlab = "t", ylab = "N")
abline(h = K[1], lty = 3)
abline(h = K[2], lty = 3)
abline(h = K[3], lty = 3)
tiempoanos <- 1
depredadores <- 0.8
depredador <- 500
victima <- 1
betas <- depredadores / (depredador * tiempoanos * victima)
####con q grande necesita muchas victimas para aumentar per capita
q <- 2.3
abline(v = q / betas, col = "green")
abline(h = 0, v = 0, lty = 3)
###Grafico de Victimas
tiempoanos <- 1
victimas <- 365
victima <- 5000
depredador <- 1
alpha <- victimas / (victima * tiempoanos * depredador)
r <- 2.2
curve(r / alpha + 0 * x, from = 0, to = 2700, ylim = c(0,60),
xlab = "N de Victimas", ylab = "N de Depredadores", col = "red")
tiempoanos <- 1
depredadores <- 0.8
depredador <- 500
victima <- 1
betas <- depredadores / (depredador * tiempoanos * victima)
####con q grande necesita muchas victimas para aumentar per capita
q <- 2.3
abline(v = q / betas, col = "green")
abline(h = 0, v = 0, lty = 3)
N0<- c(10, 20, 30)
lambda<- c (1.4, 1, 0.7)
tyears<- 1:5
#para armar una matriz de un mxn pero que tenga todo el mismo numero ejemplo: 0 el numero, 5 filas, 3 columnas
A<- matrix (0, 5, 3)
for (i in 1:3){
Nt <- N0[i] * (lambda[i] ^ tyears)
A [ , i] <- Nt
}
A
matplot (A, type = "o", xlab = "t", ylab = "N", pch = 1)
N0<- 10
tyears<- 1:5
b<- 2
d<- 1
#r-tasa de crecimiento inst?neo
r <- b-d
#~ Tama?o poblacional
Nt <- N0 * exp (r * tyears)
#Grafico de Nt Modelo Discreto
plot (tyears,Nt, type = "o", col = "red")
#para guardar la grafica
source('~/.active-rstudio-document')
N0 <- 100
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
N.all <- sapply(lambdas, function(x) N0 * x^time)
N.all
N0 <- 100
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
N.all <- sapply(lambdas, function(x N0 * x^time)
N0 <- 100
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
N.all <- sapply(lambdas, function(x) N0 * x^time)
A<- matrix (0, 5, 3)
for (i in 1:3){
Nt <- N0[i] * (lambdas[i] ^ time)
A [ , i] <- Nt
}
A
matplot (A, type = "o", xlab = "t", ylab = "N", pch = 1)
A<- matrix (0, 5, 3)
for (i in 1:3){
Nt <- N0 * (lambdas[i] ^ time)
A [ , i] <- Nt
}
A
N0 <- 100
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
A<- matrix (0, 3, 3)
for (i in 1:3){
Nt <- N0 * (lambdas[i] ^ time)
A [ , i] <- Nt
}
A
N0 <- 100
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
N.all <- sapply(lambdas, function(x) N0 * x^time)
N.all
A<- matrix (0, 4, 3)
for (i in 1:3){
Nt <- N0 * (lambdas[i] ^ time)
A [ , i] <- Nt
}
A
N0<- c(10, 20, 30)
time <- 0:3
lambdas <- c(0.5, 1, 1.5)
N.all <- sapply(lambdas, function(x) x * x^time)
N.all
A<- matrix (0, 4, 3)
for (i in 1:3){
Nt <- N0[i] * (lambdas[i] ^ time)
A [ , i] <- Nt
}
A
N.all <- sapply(lambdas, function(x) N0 * x^time)
N0<- c(10, 20, 30)
lambda<- c(1.4, 1, 0.7)
tyears<- 1:5
crec_exp <- function(N0, lambda, tyears){
A<- matrix (0, 5, 3)
for (i in 1:3){
Nt <- N0[i] * (lambda[i] ^ tyears)
A [ , i] <- Nt
}
A
print(matplot (A, type = "o", xlab = "t", ylab = "N", pch = 1))
}
crec_exp()
crec_exp(N0, lambda, tyears)
A<- matrix (0, 5, 3)
# Utilice la función 'matplot' para graficar las tres curvas de crecimiento exponencial en un mismo par de ejes. Cada curva de presentar un color y tipo de linea distinta.
source('~/.active-rstudio-document')
N0<- c(10, 20, 30)
lambda<- c(1.4, 1, 0.7)
tyears<- 1:5
crec_exp <- function(N0, lambda, tyears){
A<- matrix (0, 5, 3)
for (i in 1:3){
Nt <- N0[i] * (lambda[i] ^ tyears)
A [ , i] <- Nt
}
print(matplot (A, type = "o", xlab = "t", ylab = "N", pch = 1, lty = 1:3))
}
crec_exp(N=, lambda, tyears)
crec_exp(N0, lambda, tyears)
crec_exp(N0, lambda, tyears)
