
(1.2) Una sesión de ejemplo
===========================

### Outline:

* exresión y una asignación
* crear, borrar y reescribir objetos
* lista de objetos activos (ver si un objeto existe)
* cálculos matemáticos simples con estos objetos
* concatenar/combinar comandos
* ejemplo de calculo de gastos para un proyecto:
  - nombres a las variables (sueldos, gastos etc...)
  - un script para repetirlo cambiando detalles
  - una funcioncita para hacerlo incluso más rápido
* Ejemplo de un loop automatizando una tarea, para mostrar su utilidad
  (con la historia del proyecto?)
* Ejemplos de los gráficos más comunes: hist, plot y points/lines (abline?)
* terminar la sesión
* Resumen y final remarks (el mensaje!)

Saludo
------

Hola! Bienvenido a un nuevo video de IMSER 2012, hoy me voy a dedicar a mostrar un ejemplo de una sesión típica de R. Espero poder dar una idea general de algunas de las cosas que se pueden hacer con esta herramienta y con suerte entusiasmarlos en su proceso de aprendizaje!

Inicio
------

Lo que tiene frente a su pantalla por el momento es la consola de GNU/Linux, en donde voy a correr el R en este mismo momento...

  **INICIAR R**

Si bien puede parecer muy diferente a la interfaz de Windows, en verdad funciona de forma exactamente igual. Así se ve recién iniciada una sesión de R en su forma más elemental, es decir que sólo acepta instrucciones a traves de comandos escritos.

Una vez iniciado el R, lo que vemos es un command prompt, el signo de "mayor a" y el cursor, indicando que se espera el input del usuario.

> **MARCAR EN PANTALLA EL PROMPT Y EL CURSOR**

Podemos empezar por una expresión sencilla:

    10 / 3

Nótese que esto significa 10 dividido 3. Las operaciones matemáticas comunes utilizan los mismos símbolos que en casi todos los programas, como excel, u otros lenguajes de programación.

Lo que ocurre luego de dar enter, es que R devuelve el resultado de esta cuenta matemática simple. En este caso se trata de una expresion sencilla. R imprime el resultado en la consola y dicho valor no es guardado para su uso futuro, simplemente se descarta. Podemos muy facilmente repetir este comando, sin siquiera escribirlo de vuelta, ya que simplemente usando la tecla 'arriba' se puede volver a ver el comando y con enter lo ejecutamos de vuelta.

> **MOSTRAR ESTO**

Cuando queremos guardar un valor o un resultado en un objeto, lo que se hace es utilizar la asignación. Por ejemplo, si yo quisiera guardar el resultado anterior en un objeto llamado `x`, usaría este comando:


    x <- 10 / 3

En este caso R no imprime el resultado, pero hace algo mejor, lo guarda en un objeto llamado x, el cual existirá hasta el momento en que cerremos nuestra sesión de R. Por lo tanto, podemos utilizar nuevamente este objeto cuando querramos, por ejemplo:

    x

Nótese que el símbolo de asignación es un "menor a" seguido por un signo de menos y no deben escribirse por separados, es decir, no sirve escribir:

    x < - 10 / 3

También es posible hacer una flecha hacia la derecha, de la siguiente manera:

    10 / 3 -> x

Debe notarse que cuando ejecutamos este comando, ocurren al menos dos acciones y en este orden:

1. R ejecuta el cálculo de `10 / 3`
2. R crea el nuevo objeto `x` y le asigna como valor el resultado del cálculo anterior.

Una vez que hemos creado a `x` podemos utilizarlo en combinación con otros comandos para continuar una cadena de operaciones. Es decir, por ejemplo, podríamos crear un nuevo objeto a partir de `x`:

    y <- x * 2

Aquí el asterisco se usa para la multiplicación.

Nótese que un comando de R tiene a lo sumo 1 asignación; es decir, no es posible hacer 2 o más asignaciones en una misma orden. Por ejemplo, si quisiera crear los objetos `y` y `w` al mismo tiempo, no puedo usar estas instrucciones:

    y <- x * 2       w <- y + 15

R no puede interpretar más de un comando en la misma línea. Aunque existe un "truquillo" para hacerlo, utilizando el punto y coma para delimitar comandos:

    y <- x * 3; w <- y + 15

Sin embargo esta es una opción a la que no queremos recurrir, ya que es considerada desprolija y efectivamente dificulta la lectura de quien está tratando de entender el código. Programadores más experientes lo mirarían con escarnio si usted hace esto. Tómelo en cuenta.

Debe hacerse un paréntesis aquí, nada menor: los nombres de los objetos no tienen porqué ser de una sola letra (como `x` o `y`), y de hecho es recomendable usar palabras que den una indea del rol de cada objeto. Por ejemplo, si nuestro trabajo es calcular la hipotenusa de un triángulo rectángulo, es lo más recomendable utilizar nombres como cateto adyacente, cateto opuesto e hipotenusa por supuesto:

    cat.ad <- 4
    cat.op <- 5
    hipot <- sqrt(cat.ad ** 2 + cat.op ** 2)

Nota: aquí los `**` sirven para elevar al cuadrado los valores de los catetos. Lo mismo se puede hacer con el "techito" `^`:

    hipot <- sqrt(cat.ad ^ 2 + cat.op ^ 2)

Hay algunas reglas para hacer los nombres de los objetos: no usar espacios, no usar números al inicio de las mismas es suficiente para lo que vamos a ver en el curso.

Como tal vez se habrá imaginado, eventualmente la sesión se llena de objetos con varios nombres de objetos. Para ver la cantidad y los nombres de los objetos presentes en nuestra sesión usamos la función ls (abrebiación de "list"):

    ls()

Los paréntesis vacíos parecen un exceso de escritura, pero son necesarios para llamar a esta función. De hecho, las funciones no pueden ser llamadas sin paréntesis. Otro comando llamado `objects` sirve para exactamente lo mismo, y tal vez sea más fácil de memorizar para principiantes:

    objects()

Para mantener la producción es bueno ser organizado y por esto es muy recomendable tratar de tener una sesión de R "limpia" para no perderse en un mar de objetos que no están siendo usados. La función rm sirve para borrar objetos de la memoria.

    rm(x)

Y si teme perder información pero igual quiere borrar objetos, puede usar la función `save` para guardar aquellos objetos que no va a usar por el momento:

    save(objeto.1, objeto.2, objeto.3, file='objetos.RData')

En este caso no doy Enter porque estoy escribiendo nombres de objetos que no existen en la sesión. Por cierto, la terminación "RData" es la extensión convencional para este tipo de archivos. También se puede usar "rda" (en minúsculas).


Matemática
----------

Dado que al usar R normalmente queremos lidiar con números, R nos da una completa caja de herramientas matemáticas con las que trabajar. Las funciones comunes como seno, coseno, exponencial, logaritmo, etc, se usan de forma muy parecida a lo que son otros programas:

    sin(pi)
    exp(10)
    1000 ** 2
    log(1)

Invitamos a utilizar la ayuda de R para descubrir cada una de estas funciones, si es que no las conoce de otros programas, como planillas de cálculo por ejemplo. En caso de querer abrir la ayuda de un operador, como el doble asterisco, deben usarse comillas como en el siguiente ejemplo:

~~~
?"**"
~~~

Estas operaciones se pueden ejecutar a un número o un objeto con varios números sin cambios mayores en la sintaxis. Así, si consideramos la secuencia de los números enteros del 1 al 14, la cual se puede crear de la siguiente manera:

    sec <- 1:14

(a lo largo del curso veremos muchas veces el operador "`:`")

Con el vector de números creado (llamado `sec`) puedo ejecutar cualquier operación matemática:

    sec ** 2
    exp(sec)

R cuenta con herramientas matemáticas y gráficas bastante más sofisticadas que estos ejemplos "básicos". Por ejemplo, la función `curve` sirve para graficar una función continua cualquiera. Con dicha función es fácil graficar el coseno de x:

    tau <- 2 * pi # (Una circunferencia completa)
    curve(cos(x), from=- tau / 2, to=tau / 2)

Nótese que la variable independiente, por convención es x, pero este x no tiene nada que ver con el objeto x que creamos antes. Podemos visualizar cuánto vale el coseno de x cuando este vale 90 grados o `tau / 4`, agregando una línea vertical en este punto preciso, usando la función `abline`:

    abline(v=tau / 4, col='red')

Aquí la 'v' denota que es una línea vertical en el valor indicado. Usando la misma función puedo agregarle los ejes:

    abline(v=0, h=0, col='blue')

Supongamos que nos interesa
Ahora quiero calcular la integral de esta función en el intervalo [0, 90] grados:

    integrate(cos, 0, tau / 4)

Esto nos da una respuesta con un pequeño error numérico (ya que R no hace cálculo de la solución analítica), pero que suele ser muy exacta. De forma similar la funcin `deriv` hace calculos de derivadas.


Combinaciones de comandos
-------------------------

Una de las grandes virtudes que tiene R es que favorece naturalmente la combinación de diferentes comandos para crear cálculos sofisticados. Esta es la clave de la enorme flexibilidad de este programa.

La combinación de comandos en su forma más básica se ve algo así:

    mean(rnorm(100))

Aquí estamos ejecutando la función `rnorm`, que genera números aleatorios con distribución gaussiana o normal, para crear 100 de estos números.

> **MARCAR EN PANTALLA**

La salida de este comando es inmediatamente tomada por la función `mean`, quien calcula el promedio de estos 100 números. En términos matemáticos esto es una composición de funciones y es similar a lo que vimos anteriormente al calcular una hipotenusa hipotética.

Pero generalmente las instrucciones que son creadas son mucho más elaboradas y permiten realizar cualquier cálculo imaginable, al menos en principio (ya que no estoy tomando en cuenta limitaciones de capacidad real de las computadoras).

Veremos un caso de ejemplo ahora para ilustrar esta idea y otras que son fundamentales para sacar provecho a R.


### Presupuesto de un proyecto

Muchas veces en nuestras vidas nos veremos obligados a calcular el presupuesto de un proyecto, o el de nuestra casa, empresa, etc. Supongamos que trabajamos en un proyecto de investigación de la universidad en el que necesitamos calcular el costo de equipos de trabajo, materiales, viáticos y sueldos. Este tipo de tareas suele volverse compleja debido a que muchas variables están en juego, como diferentes modelos y costos para los equipos, cantidad de viajes y medios de transporte, estadías, cantidad de técnicos contratados, sueldos de dichos técnicos, etc.

Un ejemplo sencillo sería este:

    dineroTotal <- 450000 # Total asignado por nuestra financiadora
    salida <- 20000       # Costo aproximado de lo que cuesta hacer una salida de campo
    tecnicoMes <- 6000    # Sueldo de un técnico
    ntecnicos <- 2        # Número de técnicos a contratar
    meses <- 3            # Número de meses en que contrataríamos a dichos técnicos
    nsalidas <- 2         # Número de salidas de campo

El cálculo del márgen se haría muy fácil, con el siguiente comando:

    margen <- dineroTotal - nsalidas * salida - tecnicoMes * meses * ntecnicos

Pero dado que muchos de estos valores pueden cambiarse (como el número de meses, salidas, etc), lo mejor sería explorar distintas posibilidades. Además puede calcularse otro valor, por ejemplo, un número estimado de muestras obtenidas y procesadas, en función del número de meses, salidas y técnicos contratados:

    nmuestras <- nsalidas * ntecnicos * 300
    nproc <- nmuestras * meses * 800

(Es cierto que se puede hacer en un sólo paso, pero ya que estamos empezando con un borrador, mejor dejarlo así y seguir la línea de pensamiento.)

Si queremos jugar cambiando el número de meses o el número de salidas, entonces cambiamos el valor de alguna de estas y volvemos a ejecutar las ecuaciones.

> **USO LA FLECHA HACIA ARRIBA PARA MODIFICAR UNO DE LOS VALORES Y VEO EL NUEVO MARGEN.**

Pero no es muy práctico hacer esto en la consola todo el tiempo, por lo que voy a cambiar de estrategia. Es aquí cuando entra en juego lo que se conoce como script de R. Para hacer mi script, voy a abrir un editor de texto plano (es decir, algo tan simple como el notepad de Windows). En mi caso uso Linux, pero los principios son exactamente los mismos.

Como me interesa reciclar los últimos comandos que hice, uso `history()` y hago un copiar y pegar en el editor:

    history()

> **COPIAR & PEGAR EN MOUSEPAD**

Una vez aquí modifico aquellos que me interesa (meses, microscopio, etc). Luego salvo y hago un source en R:

> **CAMBIAR ntecnicos, O nsalidas, AGREGAR UN print(margen) Y UN print(nproc)**

    source('presupuesto.R')

> **MOSTRAR UN PAR DE ITERACIONES GUARDANDO Y CORRIENDO EL ARCHIVO**

Por cierto, esto es lo que se conoce como R no interactivo!

Cada vez que cambimos el script en el editor, tenemos que salvar antes de llamar a la función `source`, ya que si no la versión en el disco duro no se va a actualizar y por lo tanto el R va a seguir interetando la versión anterior.

Así puedo jugar con cualquiera de mis variables y determinar cuál será mi margen. Notarán que el proceso se vuelve un poco engorroso al cabo de un tiempo.

Aquí es cuando encontramos la primer razón para usar RStudio.

> **IR A RSTUDIO**

En RStudio trabajamos con el script y podemos enviar comandos a la consola para que R ejecute, sin necesidad de estar cambiando de ventana. Incluso podemos enviar el documento completo sin necesidad de salvarlo. El uso de atajos de teclado permite un trabajo mucho más fluido y eficiente.

> **MOSTRAR EJEMPLOS**


Una funcioncita para facilitar
------------------------------

Alternativamente a esta modalidad de trabajo existe la posibilidad de crear funciones personalizadas, opción que hace más rápido incluso el proceso iterativo que estábamos mostrando hasta el momento.

Las funciones en R ejecutan una tarea en particular con ciertos parámetros, llamados argumentos, definidos por el usuario en el momento de llamar a la función. Tomando los mismos comandos que tenía antes, pero cambiando sutil y estratégicamente la ubicación de los mismos voy a hacer mi funcion llamada `prp`:

> **CREAR LA SIGUIENTE FUNCIÓN**

    prp <- function(nsalidas = 2, ntecnicos = 2, salida = 20000,
                    tecnicoMes = 6000, meses = 3) {
    # Calcula el margen y la cantidad final de muestras procesadas.
      dineroTotal <- 450000
      margen <- dineroTotal - nsalidas * salida - tecnicoMes * meses
      nproc <- nsalidas * ntecnicos * 300 * meses * 800
      c(margen, nproc)
    }

Nota: la línea que empieza con un numeral `#` es lo que llamamos un "comentario" y sirve para dar una referencia a quien lee el código de la función.

Entonces si yo ejecuto

    prp()

Obtengo el cálculo que teníamos antes. Para esto el R usó los valores que puse en la primer línea del script (los que están siguiendo los signos de igual). Estos son los valores "por defecto" es decir aquellos que tomará la función si es que el usuario no puso ningún valor propio. Pero estos se pueden cambiar fácilmente. Por ejemplo, si queremos saber el resultado con 4 meses:

    prp(meses = 4)
    prp(nsalidas = 3, ntecnicos = 3)

(_No importa el orden de las variables_)

> **MOSTRAR OTROS EJEMPLOS VARIANDO ARGUMENTOS: ntecnicos, tecnicoMes, nsalidas**

La ventaja de esta aproximacion es que podemos cambiar rápidamente de valores para nuestras variables y así encontrar cómo cambia el margen de nuestro presupuesto. Por otro lado, permite resumir una tarea que antes era de varios comandos en una sóla línea. Esto tiene consecuencias importantes cuando tenemos un proyecto de programación más elaborado.

Ejemplo de un loop
------------------

Finalmente veremos un ejemplo de automatización. Supongamos que lo que queremos ver ahora son todos los valores posibles de número de salidas: esto implica ejecutar la función `prp` n veces, siendo n un número dependiente de cuál es nuestro universo de posibilidades. Concretamente, tendríamos que hacer algo como esto:

    prp(nsalidas = 1)
    prp(nsalidas = 2)
    prp(nsalidas = 3)
    prp(nsalidas = 4)

etc, hasta llegar a, digamos, `nsalidas = 20`.

Para este tipo de tareas repetitivas existen los loops (que podrían traducirse como "lazos", pero vamos a mantener el término loop durante el curso). Usando esta herramienta, el proceso se reduce a:

    for (i in 1:20) {
      cat('No. de salidas =', i, '\n')
      print(prp(nsalidas = i))
    }

Aquí aparece el comando `for`, el cual tiene una particular estructura (diferente a la de cualquier función) y aparecen comandos "normales" que aparecen "adentro" del `for`.

> **MARCAR LO QUE CORRESPONDE AL FOR Y LO QUE CORRESPONDE AL "INTERIOR"**

Lo importante de notar es que donde antes había un número (el correspondiente al número de salidas), ahora hay una letra, es decir, una variable: `i`

> **MARCAR EL LLAMADO A `prp` EN EL `for`**

El comando que comenza con `cat` no es importante por ahora.

Los loops son entonces una poderosa herramienta en manos de quien les pueda sacar provecho. Como ejemplo final, veremos ahora como podemos hacer un loop adentro de otro loop, para lograr iteraciones anidadas. Podemos ver así las combinaciones resultantes de variar el número de técnicos a contratar, en simultáneo con el número de salidas:

    for (i in 1:20) {
      for (j in 1:6) {
        cat('No. salidas =', i, 'No. técnicos =', j, '\n')
        print(prp(nsalidas = i, ntecnicos=j))
      }
    }


En este ejemplo de acercamiento, hemos combinado varias utilidades de R para hacer un análisis relativamente sofisticado del presupuesto de nuestro proyecto ficticio. Empezando incialmente con una cuenta sencilla, usamos scripts para ver diferentes combinaciones y pasamos a crear una función, para finalmente utilizar loops y así ver todo el rango de combinaciones posibles.

El objetivo de hacer este ejercicio es mostrar someramente cómo se puede pasar con facilidad de un análisis simple y limitado a otro más elaborado y abarcativo, a través de la secuenciación de pasos. Nótese que el uso de scripts en este proceso es fundamental, ya que permite construir sobre lo ya hecho y mantener ordenados y bien comentados los pasos dados para llegar a un resultado en particular.

Esta posibilidad no sólo permite que un usuario pueda volver a repetir su análisis en el futuro, si no que también facilita el compartir tareas entre varios usuarios, incluyendo el 'reproducible research' (investigación reproducible), tema muy en voga en los últimos años.

Mensaje final
-------------

En esta primer introducción a las capacidades de R no nos hemos metido demasiado en temas específicos de análisis de datos, el cual suele ser el motivo principal por la que R es utilizado. Sin embargo hemos visto herramientas de uso general que pueden y son constantemente utilizadas en cualquier análisis de datos real (funciones matemáticas, gráficos, funciones personalizadas, loops).

El objetivo de este video es mostrar rápidamente algunas de las funcionalidades básicas que tenemos en R y, con suerte, entusiasmarlos en el aprendizaje de este lenguaje. Todas las cosas que fueron tocadas en este video, y más, se van a profundizar a medida que avanza el curso, de forma que no hay que preocuparse demasiado por aquello que no se entendió claramente. Animamos a que cada uno en su casa juegue con los ejemplos dados aquí y así pueda ir descubriendo por cuenta propia lo que hay aquí.


Extra
-----
Los dos loops utilizados en esta sesión de ejemplo sólo buscan ilustrar el uso de loops, pero no son las soluciones más óptimas. Los siguientes comandos serían más adecuados en general, sobre todo si se tratase de tareas pesadas:

    prp(nsalidas = 1:20)
    outer(1:20, 1:6, prp)

Profundizaremos sobre esto en las lecciones dedicadas a esto.

