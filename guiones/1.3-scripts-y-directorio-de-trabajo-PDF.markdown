
(1.4) Scripts & Directorio de trabajo
=====================================

### Outline

* Scripts:
    - Qué es un script y para qué sirve
    - Ejemplo: `histograma.R`
* Directorio de trabajo
    - R trabaja en un directorio en particular
    - `getwd()`, `setwd()`
    - caminos relativos y árbol de directorios
    - consecuencias en funciones como `source`, `write.table`, `read.table`, `load`, etc...

___________________

Scripts en R
------------

Cuando se habla de escribir un programa, se trata poner una secuencia de comandos en un orden no aribtrario. Para guardar estos comandos se utilizan archivos de texto plano (siendo el ejemplo clásico  los archivos ".txt"). Normalmente estos archivos se guardan con una extensión que indica el lenguaje del código escrito. En el caso de R, "_.R_" y "_.r_" son las extensiones por convención. Estos archivos son llamados "scripts" o “archivos de código fuente” ("source code file" en inglés) y cada uno sirve para ejecutar una o varias tareas.

Si bien no es necesario trabajar siempre con scripts, es recomendable generar el hábito de hacerlo. Al guardar los comandos en un script también estamos guardando parte de nuestro proceso mental de trabajo, así como aquellos detalles que son sutiles y difíciles de recordar de otra forma. El uso regular de los comentarios en el código fuente refuerza esta virtud. Por otro lado, esto permite volver a reproducir nuestro análisis en el futuro o que otra persona lo haga. Se trata de algo importante a nivel individual, pero que también tiene una gran relevancia en la forma en que se hace ciencia en general. Este es un tema muy actual a nivel mundial, habiéndose instalado el término "[Reproducible Research](http://stats.stackexchange.com/questions/14999/how-are-we-defining-reproducible-research#15006)" (Investigación Reproducible) para describir esta faceta del proceso científico.

R acepta una sola orden por vez y en un script esto se traduce a que solo se puede escribir una orden por línea de texto. Tener los comandos escritos en un archivo permite ordenar el trabajo y repetir los procedimientos cuantas veces sea necesario. Usualmente se comienza con algo muy simple, unas 4 o 5 líneas, pero a medida que vamos perfeccionando y añadiendo etapas un script crece, llegando sin demasiada dificultad a las 100 líneas de código en un sólo archivo.

### Un pequeño ejemplo

En [este enlace](http://eva.universidad.edu.uy/file.php/1454/histograma.R) se puede bajar un script de R de ejemplo llamado “histograma.R”. Nota: esta página se puede abrir desde R también con el comando:

        browseURL('http://eva.universidad.edu.uy/file.php/1454/histograma.R')

El archivo se puede guardar en el disco duro en el directorio en que R trabaja por defecto (`Mis Documentos` en la mayoría de las máquinas con Windows; en R se puede saber cuál es el directorio de trabajo actual con el comando:

    getwd()

Una vez guardado, la función `source` se utiliza para ejecutar todos los comandos contenidos en el archivo:

    source(“histograma.R”)

Es necesario siempre usar comillas para indicar nombres de archivos como en este caso. Tanto las comillas dobles (") como las simples (') sirven.

Al ejecutar este comando, si el archivo `histograma.R` fue guardado en la ubicación correcta, entonces debería verse un gráfico similar al de la **Figura 1**.

________

![**Fig. 1.** Imagen creada con el script `histograma.R`](files/histograma.png "Una distribución aproximadamente normal")

________

Nota: en RStudio, si se abre el archivo en el editor de scripts, se puede ejecutar lo mismo de varias maneras:

 * Ctrl + Shift + S
 * Ctrl + Shift + Enter
 * Ctrl + Shift + O
 * Ctrl + Enter.

Todas estas variantes tienen diferencias sutiles que invitamos a que usted explore.

En este curso se pretende acostumbrar al estudiante a usar scripts para organizar su trabajo. Por esta razón las lecciones escritas se presentan en este formato.

### Observación final:

Si nuestro "`archivo.R`" no se encuentra en el directorio de trabajo actual, existen dos opciones:

* Una es cambiar el directorio de trabajo (desde R la función `setwd()`, pero también hay botones en todas las interfaces gráficas como el R-GUI de Windows y RStudio).
* La segunda opción es escribir el nombre incluyendo el camino relativo del archivo respecto al directorio actual. Para esto hay que considerar el árbol de directorios de nuestro disco duro y en qué parte de él se encuentra el `getwd()`.

Como se habrá dado cuenta, el directorio de trabajo es clave para la interacción entre R y archivos externos, como pueden ser scripts o datos. Por esta razón el resto del video será dedicado a comprender mejor la forma de trabajar con el directorio de trabajo.

________

Directorio de trabajo
---------------------

Cómo ya habrá notado a lo largo de este video, el directorio de trabajo es simplemente la carpeta en la que R está trabajando en un momento dado. Ya vimos que la función `getwd` nos devuelve la dirección de la carpeta actual, o más exactamente el "camino" desde la raíz hasta esta. En el caso del ejemplo gráfico (Fig. 2), el comando `getwd()` devolvería un texto como este:

    "/raíz/dir_A/dir_trabajo"

Nótese que se usa la _barra_ y **no la contrabarra** (el carácter utilizado por Windows) para armar el camino.

Con la función `dir` podemos saber qué archivos se encuentran en nuestro directorio de trabajo actual, ejecutando simplemente

    dir()

________

![**Fig. 2.** Árbol de directorios de ejemplo](files/dir-tree-small.png "Ejemplo de árbol de carpetas")

________

De esta forma sabemos el **camino** que lleva desde el directorio raíz (la raíz del árbol de carpetas) hasta el directorio de trabajo actual. En Windows el camino por defecto típicamente es "`C:\Documents and Settings\username\My Documents`", mientras que en GNU/Linux suele ser "`/home/usuario/`" (o directamente "`~`").

### Acceso a archivos en el disco duro

Como vimos antes, para ejecutar el comando

    source('histograma.R')

Es necesario que el archivo con el código fuente `histograma.R` se encuentre en el directorio de trabajo actual. En caso de que el código fuente se encuentre en otra carpeta, podemos utilizar el **camino absoluto** o el **camino relativo** para acceder al mismo. Supongamos que `histograma.R` se encuentra en la carpeta `dir_A`, mientras que nuestra sesión de R está corriendo en el directorio `dir_trabajo`. Entonces para ejecutar `source` los caminos absoluto y relativo son respectivamente:

 * "`/raíz/dir_A/histograma.R`"
 * "`../histograma.R`"

Nótese que se usan los dos puntos "`..`" para indicar que queremos ir a un nivel superior dentro del árbol. Si el archivo se encontrara en el directorio `dir_B` de la **Fig. 2** entonces el camino relativo sería

    "../../dir_B"

(aquí "`../../`" equivale al directorio "`raíz`")

Nótese también que el camino _incluye_ al archivo con el script de R.

En el caso de que `histograma.R` se encontrar en la carpeta `subdir` de la **Fig. 2**, los caminos absoluto y relativo serían:

 * "`/raíz/dir_A/dir_trabajo/subdir/histograma.R`"
 * "`subdir/histograma.R`"

Nótese por último que los caminos relativos nunca usan la barra como carácter inicial.

### Otras funciones

Así como `source` interactúa con archivos que se encuentran en nuestro disco duro, otras funciones usadas a menudo también lo hacen y siguen las mismas reglas básicas en lo que respecta a la forma en que llaman o crean archivos en el disco duro.

Mencionamos aquí algunas de estas funciones:

 * `read.table` & `write.table`, usadas para importar y exportar tablas de datos
 * `save`, `save.image` & `load`, para guardar y cargar áreas de trabajo u objetos de R en un formato nativo de este lenguaje

Menos usadas, pero posiblemente relevantes son `dir.create`, `unlink`, `file.path` o `file.info`, todas ellas funciones que manipulan archivos y/o carpetas del disco duro.

_______

Observaciones finales
---------------------

### Scripts

La comprensión de cómo y para qué se usan los scripts es fundamental para este curso así como para el uso cotidiano de R. Si bien no se ha mencionado explícitamente, la coherencia y prolijidad con la que hacemos nuestros scripts se vuelve una virtud muy valiosa a media que estos van creciendo en tamaño. Por otro lado, el orden a la hora de documentar y modificar versiones de nuestros scripts se hace muy importante cuando se trata de proyectos grandes. Una práctica extendida en programación es el uso de programas especializados en el [control de versiones](https://es.wikipedia.org/wiki/Control_de_versiones), como [git](http://git-scm.com/) o [subversion](http://subversion.apache.org/). Dicho software existe para poder conservar la historia completa de cambios que van sufriendo los archivos con los que se trabaja y particularmente sirven para coordinar el trabajo entre múltiples desarrolladores en simultáneo (de hecho la mayor parte de los contenidos de este curso se encuentran alojados en un [repositorio online](https://github.com/jumanbar/Curso-R)).

### Directorios de trabajo y caminos absolutos/relativos

Casi todo trabajo real que hagamos con R va a involucrar archivos contenidos en el disco duro. Entender a la perfección cómo funciona el acceso por línea de comando a estos archivos puede parecer más que lo necesario para trabajar con R (sobre todo considerando programas como RStudio que ofrecen facilidades para no molestarse demasiado con estos detalles). Sin embargo estos conocimientos suelen hacerse necesarios antes de lo que uno espera y eventualmente se convierten en algo cotidiano. Por lo tanto, acostumbrarse a usar los comandos `getwd`, `setwd`, `dir` y a escribir los caminos relativos (o absolutos) de los archivos es una excelente práctica para todo principiante.

















